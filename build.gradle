plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
    id "com.diffplug.spotless" version "6.4.1"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"
    apply plugin: "com.diffplug.spotless"

    archivesBaseName = rootProject.archives_base_name
    version = "${rootProject.mod_version}-${rootProject.minecraft_version}"
    group = rootProject.maven_group

    repositories {
        maven {
            name = 'ModMaven (K4U-NL)'
            url = 'https://modmaven.dev/'
            content {
                includeGroup "appeng"
            }
        }

        maven {
            name = 'CurseMaven'
            url = 'https://cursemaven.com'
            content {
                includeGroup "curse.maven"
            }
        }

        maven {
            name = 'Progwml6'
            url = 'https://dvs1.progwml6.com/files/maven/'
            content {
                includeGroup "mezz.jei"
            }
        }

        maven {
            name = 'Shedaniel'
            url 'https://maven.shedaniel.me/'
            content {
                includeGroup "me.shedaniel.cloth"
                includeGroup "dev.architectury"
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }

    spotless {
        java {
            target("src/**/java/**/*.java")

            endWithNewline()
            indentWithSpaces()
            removeUnusedImports()
            toggleOffOn()
            eclipse().configFile(rootProject.file("codeformat/codeformat.xml"))
            importOrderFile(rootProject.file("codeformat/mega.importorder"))

            // courtesy of diffplug/spotless#240
            // https://github.com/diffplug/spotless/issues/240#issuecomment-385206606
            custom 'noWildcardImports', {
                if (it.contains('*;\n')) {
                    throw new Error('No wildcard imports allowed')
                }
            }
            bumpThisNumberIfACustomStepChanges(1)
        }

        format("json") {
            target("src/*/resources/**/*.json")
            targetExclude("src/generated/resources/**")
            prettier().config(parser: "json")
        }
    }
}
