plugins {
	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.diffplug.spotless' version '6.4.1'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

group = 'gripe.90'
archivesBaseName = 'megacells-fabric'
version = "${mega_version}-${minecraft_version}"

repositories {
	mavenLocal()

	maven {
		url = uri("https://modmaven.dev/")
		content {
			includeGroup("appeng")
		}
	}

	maven {
		url = uri("https://cursemaven.com")
		content {
			includeGroup "curse.maven"
		}
	}

	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}

	maven {
		url = uri("https://dvs1.progwml6.com/files/maven/")
		content {
			includeGroup("mezz.jei")
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
	}

	modImplementation "net.fabricmc:fabric-loader:${loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}+${minecraft_version}"
	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}+${minecraft_version}"

	// modImplementation "appeng:appliedenergistics2-fabric:${ae2_version}"
	modImplementation "maven.modrinth:ae2:fabric-${ae2_version}"

	modRuntimeOnly "mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"

	include modLocalRuntime("teamreborn:energy:${tr_energy_version}") {
		exclude group: "net.fabricmc.fabric-api"
	}
}

loom {
	accessWidenerPath = file("src/main/resources/megacells.accesswidener")

	runs {
		datagen {
			inherit client
			name "Minecraft Datagen"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated")}"
			vmArg "-Dfabric-api.datagen.strict-validation"
			source "main"

			property "megacells.generateData", "true"
			property "megacells.generateData.outputPath", file("src/generated/resources").absolutePath
			property "megacells.generateData.existingData", file("src/main/resources").absolutePath
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_megacells"}
	}
}

sourceSets {
	portaforgy
	main {
		compileClasspath += sourceSets.portaforgy.output
		runtimeClasspath += sourceSets.portaforgy.output
		resources {
			srcDir 'src/generated/resources'
		}
	}
}

configurations {
	portaforgyImplementation.extendsFrom(compileClasspath)
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

spotless {
	java {
		target("src/**/java/**/*.java")

		endWithNewline()
		indentWithSpaces()
		removeUnusedImports()
		toggleOffOn()
		eclipse().configFile("codeformat/codeformat.xml")
		importOrderFile("codeformat/mega.importorder")
	}

	format("json") {
		target("src/*/resources/**/*.json")
		targetExclude("src/generated/resources/**")
		prettier().config(parser: "json")
	}
}