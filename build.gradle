plugins {
    id("architectury-plugin") version "3.4-SNAPSHOT"
    id("dev.architectury.loom") version "1.0-SNAPSHOT" apply false
    id("io.github.juuxel.loom-quiltflower") version "1.7.1" apply false
    id("me.shedaniel.unified-publishing") version "0.1.+" apply false
    id("com.diffplug.spotless") version "6.4.1"
}

architectury {
    minecraft = minecraft_version
}

subprojects {
    apply(plugin: "dev.architectury.loom")
    apply(plugin: "io.github.juuxel.loom-quiltflower")
    apply(plugin: "me.shedaniel.unified-publishing")

    archivesBaseName = mod_id + "-" + project.name
    version = (System.getenv("MEGA_VERSION") ?: "v0.0.0").substring(1) + "-" + minecraft_version
    group = maven_group + "-" + mod_id

    loom {
        silentMojangMappingsLicense()
        mixin {
            defaultRefmapName.set(archivesBaseName + "-refmap.json")
        }
    }

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings loom.officialMojangMappings()
    }

    architectury {
        injectInjectables = false
    }
}

tasks.register("collectJars", Copy) {
    def tasks = [project("fabric").tasks.remapJar, project(":forge").tasks.remapJar]
    dependsOn tasks

    from tasks
    into file("${buildDir}/libs").absolutePath
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"
    apply plugin: "com.diffplug.spotless"

    repositories {
        mavenLocal()
        mavenCentral()

        maven {
            name = "ModMaven (K4U-NL)"
            url = uri("https://modmaven.dev/")
            content {
                includeGroup("appeng")
                includeGroup("mekanism")
            }
        }

        maven {
            name = "CurseMaven"
            url = uri("https://cursemaven.com")
            content {
                includeGroup("curse.maven")
            }
        }

        maven {
            name = "Modrinth Maven"
            url = uri("https://api.modrinth.com/maven")
            content {
                includeGroup("maven.modrinth")
            }
        }

        maven {
            name = "Progwml6"
            url = uri("https://dvs1.progwml6.com/files/maven/")
            content {
                includeGroup("mezz.jei")
            }
        }

        maven {
            name = "Shedaniel"
            url = uri("https://maven.shedaniel.me/")
            content {
                includeGroup("me.shedaniel.cloth")
                includeGroup("dev.architectury")
            }
        }

        maven {
            name = "BlameJared"
            url = uri("https://maven.blamejared.com")
            content {
                includeGroup("vazkii.botania")
                includeGroup("vazkii.patchouli")
            }
        }

        maven {
            name = "TheIllusiveC4"
            url = uri("https://maven.theillusivec4.top/")
            content {
                includeGroup("top.theillusivec4.curios")
            }
        }

        maven {
            name = "TerraformersMC"
            url = uri("https://maven.terraformersmc.com/")
            content {
                includeGroup("com.terraformersmc")
                includeGroup("dev.emi")
            }
        }

        maven {
            name = "LadySnake Libs"
            url = uri("https://ladysnake.jfrog.io/artifactory/mods")
            content {
                includeGroup("dev.onyxstudios.cardinal-components-api")
            }
        }

        maven {
            name = "JamiesWhiteShirt"
            url = uri("https://maven.jamieswhiteshirt.com/libs-release/")
            content {
                includeGroup("com.jamieswhiteshirt")
            }
        }

        maven {
            name = "Jitpack"
            url = uri("https://jitpack.io/")
            content {
                includeGroup("com.github.emilyploszaj")
            }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 17
    }

    assemble {
        dependsOn(collectJars)
    }

    java {
        withSourcesJar()
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${archivesBaseName}"}
        }
    }

    if ((project.name == "fabric" || project.name == "forge") && project.version != "0.0.0") {
        unifiedPublishing {
            project {
                gameVersions = [minecraft_version]
                gameLoaders = [project.name]
                version = project.name + "-" + project.version

                def loader = project.name.substring(0, 1).toUpperCase() + project.name.substring(1)
                def releaseChannel = "release"
                def changes = System.getenv("CHANGELOG") ?: "No changelog provided?"
                if (project.version.toLowerCase().contains("alpha")) {
                    releaseChannel = "alpha"
                    changes = "THIS IS AN ALPHA RELEASE, MAKE A BACKUP BEFORE INSTALLING AND FREQUENTLY WHILE PLAYING, AND PLEASE REPORT ANY ISSUE YOU MAY FIND ON THE ISSUE TRACKER.\n\n" + changes
                } else if (project.version.toLowerCase().contains("beta")) {
                    releaseChannel = "beta"
                    changes = "This is a beta release. It is expected to be mostly stable, but in any case please report any issue you may find.\n\n" + changes
                }

                releaseType = releaseChannel
                changelog = changes
                displayName = String.format("%s (%s %s)", project.version.substring(0, project.version.lastIndexOf("-")), loader, minecraft_version)

                mainPublication(remapJar) // Declares the publicated jar

                relations {
                    depends {
                        curseforge = "applied-energistics-2"
                        modrinth = "ae2"
                    }
                    optional {
                        curseforge = "applied-energistics-2-wireless-terminals"
                        curseforge = "applied-botanics-addon"
                        modrinth = "applied-energistics-2-wireless-terminals"
                    }
                    if (project.name == "forge") {
                        optional {
                            curseforge = "applied-mekanistics"
                            modrinth = "applied-mekanistics"
                        }
                    }
                }

                var cfToken = System.getenv("CF_TOKEN")
                if (cfToken != null) {
                    curseforge {
                        token = cfToken
                        id = "622112"
                    }
                }

                var mrToken = System.getenv("MODRINTH_TOKEN")
                if (mrToken != null) {
                    modrinth {
                        token = mrToken
                        id = "7QZJE3uU"
                    }
                }
            }
        }
    }

    spotless {
        java {
            target("src/**/java/**/*.java")

            endWithNewline()
            indentWithSpaces()
            removeUnusedImports()
            toggleOffOn()
            eclipse().configFile(rootProject.file("codeformat/codeformat.xml"))
            importOrderFile(rootProject.file("codeformat/mega.importorder"))

            // courtesy of diffplug/spotless#240
            // https://github.com/diffplug/spotless/issues/240#issuecomment-385206606
            custom("noWildcardImports", {
                if (it.contains("*;\n")) {
                    throw new Error("No wildcard imports allowed")
                }
            })
            bumpThisNumberIfACustomStepChanges(1)
        }

        format("json") {
            target("src/*/resources/**/*.json")
            targetExclude("src/generated/resources/**")
            prettier().config(parser: "json")
        }
    }
}
